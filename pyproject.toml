[build-system]
requires = ["setuptools>=68.0", "setuptools-scm>=8.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "semantic-kernel-agent-factory"
dynamic = ["version"]
description = "SDK for creating and managing OpenAI agents with MCP server integration"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Jiahao Zhu", email = "jiahzhu@outlook.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = ["semantic-kernel", "agent", "mcp", "server", "factory", "sdk", "service", "sse", "http"]
requires-python = ">=3.10"
dependencies = [
    "mcp>=1.9.0",

    # Core semantic kernel and agent functionality
    "semantic-kernel>=1.31.0",
    "pydantic>=2.11.4", 
    "pydantic-settings>=2.9.1",
    
    # Essential utilities
    "python-dotenv>=1.1.0",
    "click>=8.2.1",
    "typing-extensions>=4.13.2",
    
    # UI framework for console app
    "textual>=0.85.0",
    
    # Async support
    "anyio>=4.9.0",
    
    # AgentServiceFactory dependencies
    "a2a-sdk>=0.2.4",
    "starlette>=0.46.2",
    
    # Observability (core telemetry support)
    "opentelemetry-api>=1.33.1",
    "opentelemetry-sdk>=1.33.1",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    # Testing framework
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    
    # Code formatting and linting
    "black>=25.1.0",
    "isort>=5.12.0",
    "ruff>=0.1.0",
    
    # Type checking
    "mypy>=1.16.0",
    "types-PyYAML>=6.0.12.20250516",
    "types-click>=7.1.0",

    "flake8>=7.2.0",
]

# Web service dependencies (if you plan to add web features)
web = [
    "fastapi>=0.115.12",
    "uvicorn>=0.34.2",
    "httpx>=0.28.1",
]

# Extended monitoring and observability
monitoring = [
    "opentelemetry-instrumentation-fastapi>=0.41b0",
    "opentelemetry-exporter-prometheus>=1.12.0rc1",
    "prometheus-client>=0.19.0",
]

# Documentation dependencies
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=2.0.0",
    "myst-parser>=2.0.0",
    "sphinx-autodoc-typehints>=1.24.0",
]

[project.urls]
Repository = "https://github.com/jhzhu89/semantic-kernel-agent-factory"
Issues = "https://github.com/jhzhu89/semantic-kernel-agent-factory/issues"
Documentation = "https://github.com/jhzhu89/semantic-kernel-agent-factory/tree/main/docs"

[project.scripts]
agent-factory = "agent_factory.console.commands:console"

[tool.setuptools]
package-dir = {"" = "."}

[tool.setuptools.packages.find]
include = ["agent_factory*"]
exclude = ["tests*", "examples*", "scripts*"]

[tool.setuptools.package-data]
"agent_factory" = ["py.typed"]

[tool.setuptools.exclude-package-data]
"*" = ["__pycache__", "*.py[cod]"]

[tool.setuptools_scm]
write_to = "agent_factory/_version.py"
version_scheme = "post-release"
local_scheme = "node-and-date"

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    # Directories
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | node_modules
  | migrations
  | docs/_build
  # Auto-generated files
  | agent_factory/_version\.py
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip = ["agent_factory/_version.py"]
known_first_party = ["agent_factory"]
known_third_party = [
    "semantic_kernel",
    "pydantic",
    "pydantic_settings",
    "fastapi",
    "uvicorn",
    "starlette",
    "httpx",
    "click",
    "yaml",
    "anyio",
    "opentelemetry",
    "mcp",
    "a2a",
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
disallow_any_generics = false
disallow_untyped_calls = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false
check_untyped_defs = true
no_implicit_optional = true
show_error_codes = true
show_column_numbers = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "a2a.*",
    "mcp.*",
    "semantic_kernel.*",
    "httpx_sse.*",
    "opentelemetry.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=agent_factory",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["agent_factory"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/examples/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py310"
line-length = 100
exclude = ["agent_factory/_version.py"]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-args
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["ARG001", "S101"]
